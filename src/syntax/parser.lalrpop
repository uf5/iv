use crate::types::*;
use super::tokens::*;
use std::collections::HashMap;

grammar<'input>(input: &'input str);

pub IV: Module = Module => <>;

Module: Module = {
    <ds:Defs> => {
        let (data_defs, op_defs) = ds;
        Module::new(data_defs, op_defs)
    },
};

Defs: (HashMap<String, DataDef>, HashMap<String, OpDef>) = {
    => (HashMap::new(), HashMap::new()),
    <mut ds:Defs> <nd:DataDef> => {
        let (n, d) = nd;
        ds.0.insert(n, d);
        ds
    },
    <mut ds:Defs> <no:OpDef> => {
        let (n, o) = no;
        ds.1.insert(n, o);
        ds
    },
};

DataDef: (String, DataDef) = {
    "data" <name:"uident"> <params:"lident"*> ":" <constrs:Comma<DataConstr>> "." => {
        let params = params.into_iter().map(|s| s.to_owned()).collect();
        let constrs = constrs.into_iter().collect();
        (name.to_owned(), DataDef { params, constrs })
    },
};

DataConstr: (String, DataConstr) = {
    <name:"lident"> => (name.to_owned(), DataConstr { params: vec![] }),
    "[" <params:Comma<Type>> "]" <name:"lident"> => (name.to_owned(), DataConstr { params }),
};

Type: Type = {
    #[precedence(level="0")]
    <name:"lident"> => Type::Poly(name.to_owned()),
    <name:"uident"> => Type::Mono(name.to_owned()),
    "[" <pre:Comma<Type>> "]" "[" <post:Comma<Type>> "]" => Type::Op(OpType { pre, post }), 
    #[precedence(level="1")] #[assoc(side="left")]
    <t1:Type> <t2:Type> => Type::App(Box::new(t1), Box::new(t2)),
};

OpDef: (String, OpDef) = {
    "define" "[" <pre:Comma<Type>> "]" <name:"lident"> "[" <post:Comma<Type>> "]" ":" <body:Op*> "." => {
        let ann = OpType { pre, post };
        let body = Body::Body(body);
        (name.to_owned(), OpDef { ann, body })
    },
};

Op: Op = {
    <lit:Literal> => Op::Literal(lit),
    <name:"lident"> => Op::Name(name.to_owned()),
    "case" "{" <head_arm:CaseArm> "}" => {
        Op::Case(head_arm, vec![])
    },
    "case" "{" <head_arm:CaseArm> "," <arms:Comma<CaseArm>> "}" => {
        Op::Case(head_arm, arms)
    },
};

Literal: Literal = {
    <n:"num"> => Literal::Int(n),
};

CaseArm: CaseArm = {
    <constr:"lident"> "{" <body:Op*> "}" => CaseArm { constr: constr.to_owned(), body },
};

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        },
    },
};

extern {
    type Location = usize;
    type Error = LexingError;

    enum Token<'input> {
        "." => Token::End,
        "num" => Token::Number(<i32>),
        "lident" => Token::LIdent(<&'input str>),
        "uident" => Token::UIdent(<&'input str>),
        "define" => Token::Define,
        "data" => Token::Data,
        "case" => Token::Case,
        ":" => Token::Colon,
        "," => Token::Comma,
        "[" => Token::BracketOpen,
        "]" => Token::BracketClose,
        "(" => Token::ParenOpen,
        ")" => Token::ParenClose,
        "{" => Token::BraceOpen,
        "}" => Token::BraceClose,
    }
}