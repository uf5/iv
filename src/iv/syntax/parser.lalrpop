use crate::iv::types::*;
use super::tokens::*;
use std::collections::HashMap;

grammar<'input>(input: &'input str);

pub IV: Module = Module => <>;

Module: Module = {
    => Module { op_defs: HashMap::new(), data_defs: HashMap::new() },
    <mut p:Module> <nd:DataDef> => {
        let (n, d) = nd;
        p.data_defs.insert(n.to_owned(), d);
        p
    },
}

DataDef: (String, DataDef) = {
    "data" <name:"uident"> <params:"lident"*> ":" <constrs:Comma<DataConstr>> "." => {
        let params = params.into_iter().map(|s| s.to_owned()).collect();
        let constrs = constrs.into_iter().collect();
        (name.to_owned(), DataDef { params, constrs })
    },
};

DataConstr: (String, DataConstr) = {
    <name:"lident"> => (name.to_owned(), DataConstr { params: vec![] }),
    "[" <params:Comma<Type>> "]" <name:"lident"> => (name.to_owned(), DataConstr { params }),
};

Type: Type = {
    #[precedence(level="0")]
    <name:"lident"> => Type::Poly(name.to_owned()),
    <name:"uident"> => Type::Mono(name.to_owned()),
    "[" <pre:Comma<Type>> "]" "[" <post:Comma<Type>> "]" => Type::Op(OpType { pre, post }), 
    #[precedence(level="1")] #[assoc(side="left")]
    <t1:Type> <t2:Type> => Type::App(Box::new(t1), Box::new(t2)),
};

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        },
    },
};

extern {
    type Location = usize;
    type Error = LexingError;

    enum Token<'input> {
        "." => Token::End,
        "num" => Token::Number(<i32>),
        "lident" => Token::LIdent(<&'input str>),
        "uident" => Token::UIdent(<&'input str>),
        "define" => Token::Define,
        "data" => Token::Data,
        ":" => Token::Colon,
        "," => Token::Comma,
        "[" => Token::BracketOpen,
        "]" => Token::BracketClose,
        "(" => Token::ParenOpen,
        ")" => Token::ParenClose,
        "{" => Token::BraceOpen,
        "}" => Token::BraceClose,
    }
}